---
- name: configure media server caddy
  set_fact:
    caddy: "{{ caddy | combine(caddy_media_server, recursive=True, list_merge='append') }}"
    cacheable: true
  changed_when: true
  notify: configure caddy
  tags: caddy

- name: configure media server docker
  set_fact:
    docker: "{{ docker | combine(docker_media_server, recursive=True, list_merge='append') }}"
    cacheable: true
  changed_when: true
  notify: configure docker
  tags: docker

- name: setup cleanup downloads timer
  copy:
    content: |
      [Unit]
      Description=Cleanup old downloads from {{ downloads_folder }}

      [Timer]
      OnCalendar=04:30
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/cleanup-downloads.timer
  become: true
  notify: enable cleanup-downloads

- name: setup cleanup downloads service
  copy:
    content: |
      [Unit]
      Description=Cleanup old downloads from {{ downloads_folder }}

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/find {{ downloads_folder }} -maxdepth 1 -mtime +{{ cleanup_downloads_age }} -exec rm -rf {} \;
    dest: /etc/systemd/system/cleanup-downloads.service
  become: true
  notify: enable cleanup-downloads

# - name: configure jackett basepath
#   replace:
#     path: "{{ app_folder }}/jackett/Jackett/ServerConfig.json"
#     regexp: '"BasePathOverride": ".*",'
#     replace: '"BasePathOverride": "/jackett",'
#   notify: restart jackett

# - name: configure radarr basepath
#   replace:
#     path: "{{ app_folder }}/radarr/config.xml"
#     regexp: '<UrlBase>.*</UrlBase>'
#     replace: '<UrlBase>radarr</UrlBase>'
#   notify: restart radarr

# - name: configure readarr basepath
#   replace:
#     path: "{{ app_folder }}/readarr/config.xml"
#     regexp: '<UrlBase>.*</UrlBase>'
#     replace: '<UrlBase>readarr</UrlBase>'
#   notify: restart readarr

# - name: configure sonarr basepath
#   replace:
#     path: "{{ app_folder }}/sonarr/config.xml"
#     regexp: '<UrlBase>.*</UrlBase>'
#     replace: '<UrlBase>sonarr</UrlBase>'
#   notify: restart sonarr

# - name: configure tautulli basepath
#   replace:
#     path: "{{ app_folder }}/tautulli/config.ini"
#     regexp: 'http_root = ".*"'
#     replace: 'http_root = tautulli'
#   notify: restart tautulli

# - name: configure tautulli proxy
#   replace:
#     path: "{{ app_folder }}/tautulli/config.ini"
#     regexp: 'http_proxy = .*'
#     replace: 'http_proxy = 1'
#   notify: restart tautulli

# - name: configure bazarr proxy
#   replace:
#     path: "{{ app_folder }}/bazarr/config/config.ini"
#     regexp: 'base_url = .*'
#     replace: 'base_url = /bazarr'
#   notify: restart bazarr

# - name: configure mylar3 proxy
#   replace:
#     path: "{{ app_folder }}/mylar3/mylar/config.ini"
#     regexp: 'http_root = .*'
#     replace: 'http_root = /mylar'
#   notify: restart bazarr

# - name: configure deluge thin client auth
#   lineinfile:
#     dest: "{{ app_folder }}/deluge/auth"
#     line: "{{ web_user }}:{{ web_password }}:10"
#   notify: restart deluge
