{
    email {{ ansible_email }}
}

(auth) {
  route /auth* {
    authp {
      crypto default token lifetime 3600
      crypto key sign-verify {{ caddy.token_secret }}
      context {args.0}

      backends {
        google_oauth2_backend {
          method oauth2
          realm google
          provider google
          client_id {{ google_oauth2_client_id }}
          client_secret {{ google_oauth2_client_secret }}
          # scopes openid email profile
          scopes email
        }
      }

      {% for user in caddy.users %}
      transform user {
        match email "{{ user.name }}"
        action add roles {{ user.roles | join (" ") }}
      }
      {% endfor %}

    }
  }
}

127.0.0.1, localhost, {{ inventory_hostname }} {
  log {
      level ERROR
      format console {
        time_format wall
      }
      output file /data/log/error.log
  }
{% if caddy.redirect is defined %}
  redir / {{ caddy.redirect }}
{% endif %}

  route / {
    authorize {
      primary yes
      crypto key verify {{ caddy.token_secret }}
      set auth url /auth/oauth2/google
      inject headers with claims
      allow roles superadmin
    }
  }

  import auth

{% for endpoint in caddy.endpoints.values() %}
  redir {{ endpoint.path }} {{ endpoint.path }}/

  {% if endpoint.auth == "basic" %}
    basicauth {{ endpoint.path }}* {
      {{ endpoint.user }} {{ endpoint.password | password_hash('bcrypt') | b64encode }}
    }
  {% endif %}

  route {{ endpoint.path }}* {
  {% if endpoint.auth == "oauth" %}
    authorize {
      allow roles {{ endpoint.roles | join (' ') }}
    }
  {% endif %}

  {% if endpoint.type == "share" or endpoint.strip_prefix | default(false) %}
    uri strip_prefix {{ endpoint.path }}
  {% endif %}

  {% if endpoint.type == "proxy" %}
    reverse_proxy * {{ endpoint.scheme | default('http') }}://{{ endpoint.host }}:{{ endpoint.port }} {

    {% if endpoint.scheme is defined and endpoint.scheme == 'https' %}
      transport http {
          tls_insecure_skip_verify
      }
    {% endif %}

    {% for header in endpoint.header_up | default ([]) %}
      header_up {{ header }}
    {% endfor %}
    }

  {% elif endpoint.type == "share" %}
    root * {{ endpoint.path }}
    file_server browse
  {% endif %}
  }

{% endfor %}

}

{% for name, remote in caddy.remotes.items() %}

{{ name }}.{{ remote.domain }} {

  {% if remote.auth == "basic" %}
  basicauth /* {
    {{ remote.user }} {{ remote.password | password_hash('bcrypt') | b64encode }}
  }
  {% endif %}

  route /* {

  {% if remote.auth == "oauth" %}
    jwt {
      primary yes
      context {{ name }}
      auth_url /auth/oauth2/google
      enable claim headers
      trusted_tokens {
        static_secret {
          token_name access_token
          token_secret {{ caddy.token_secret }}
        }
      }
      allow roles {{ remote.roles | join (' ') }}
    }
  {% endif %}
    reverse_proxy * {{ remote.scheme | default('http') }}://{{ remote.host }}:{{ remote.port | default('80') }} {
      {% if remote.scheme | default('http') == "https" %}
      transport http {
        tls_insecure_skip_verify
      }
      {% endif %}
    }
  }

  import auth {{ name }}
}

{% endfor %}
